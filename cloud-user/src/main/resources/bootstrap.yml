consul.ip: 127.0.0.1
datasource.ip: 127.0.0.1
redis.ip: 127.0.0.1

#定义端口
server:
  port: 7200

spring:
  output:
    ansi:
      # 打印彩色日志
      enabled: always
  #定义应用名
  application:
    name: cloud-user
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://${datasource.ip}:3306/cloud-module?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
    username: root
    password: 123456
    driverClassName: com.mysql.cj.jdbc.Driver
    druid:
      # 连接池的配置信息
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      # 配置DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: "/*"
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
      # 配置DruidStatViewServlet
      stat-view-servlet:
        url-pattern: "/druid/*"
        # IP白名单(没有配置或者为空，则允许所有访问)
        allow: 127.0.0.1,192.168.163.1
        # IP黑名单 (存在共同时，deny优先于allow)
        deny: 192.168.1.73
        #  禁用HTML页面上的“Reset All”功能
        reset-enable: false
        # 登录名
        login-username: admin
        # 登录密码
        login-password: 123456

  cloud:
    consul:
      host: ${consul.ip}
      port: 8500
      discovery:
        # 启用服务发现
        enabled: true
        # 启用服务注册
        register: true
        # 服务停止时取消注册
        deregister: true
        # 表示注册时使用IP而不是hostname
        prefer-ip-address: true
        # 执行监控检查的频率
        health-check-interval: 30s
        # 设置健康检查失败多长时间后，取消注册
        health-check-critical-timeout: 30s
        # 健康检查的路径
        health-check-path: /actuator/health
        # 服务注册标识，格式为：应用名称+服务器IP+端口
        instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
        # 注册到consul的服务名称
        service-name: ${spring.application.name}

  thrift:
    server:
      service-id: user-service-thrift
      service-model: hsHa
      port: 25000
      worker-queue-capacity: 1000
      hs-ha:
        min-worker-threads: 5
        max-worker-threads: 20
        keep-alived-time: 3
      discovery:
        enabled: true
        host: ${consul.ip}
        port: 8500
        deregister: true
        tags:
          - user-service-thrift
          - hsHa
        health-check:
          enabled: true
          check-interval: 10
          check-timeout: 3

  #防止Date类型返到前端是时间戮
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

  # redis缓存
  redis:
    host: ${redis.ip}
    database: 0
    port: 6379
    password:

  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: never
    properties:
      org:
        quartz:
          scheduler:
            # 如果使用集群，实例名需相同
            instanceName: clusteredScheduler
            # 如果使用集群，id需相同
            instanceId: AUTO
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_
            isClustered: true
            clusterCheckinInterval: 10000
            useProperties: false
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true


#整合mybatis
mybatis:
  # type-aliases-package: com.project.user.entity      # 定义所有操作类的别名所在包，（定义多个别名用豆号隔开）
  # mapper-locations: classpath:mybatis/**/*.xml      # 所有的mapper映射文件
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    cacheEnabled: true                               #开启二级缓存
    mapUnderscoreToCamelCase: true                 #驼峰的自动映射

##actuator监控，暴露所有端点，访问时需加前缀，/actuator/env
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always

#feign数据压缩处理
feign:
  compression:
    request:
      mime-types:       # 可以被压缩的类型
        - text/xml
        - application/xml
        - application/json
      min-request-size: 2048 # 超过2048的字节进行压缩
  hystrix:
    enabled: true    #服务降级需要加上此处

#ribbon超时配置
ribbon:
  ConnectTimeout: 60000     #ribbon请求连接的超时时间
  ReadTimeout: 60000          #请求处理的超时时间
  MaxAutoRetries: 1         #对第一次请求的服务的重试次数
  MaxAutoRetriesNextServer: 1  #要重试的下一个服务的最大数量（不包括第一个服务）
  OkToRetryOnAllOperations: true

#hystrix超时配置
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 60000

consul.ip: 127.0.0.1
datasource.ip: 127.0.0.1
redis.ip: 127.0.0.1

#定义端口
server:
  port: 7200

spring:
  output:
    ansi:
      # 打印彩色日志
      enabled: always
  #定义应用名
  application:
    name: cloud-user
  datasource:
    url: jdbc:mysql://${datasource.ip}:3306/cloud-module?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
    username: root
    password: 123456
    driverClassName: com.mysql.cj.jdbc.Driver
    hikari:
      minimum-idle: 3
      auto-commit: true
      idle-timeout: 10000
      pool-name: DatebookHikariCP
      max-lifetime: 1800000
      connection-timeout: 30000

  cloud:
    consul:
      host: ${consul.ip}
      port: 8500
      discovery:
        # 启用服务发现
        enabled: true
        # 启用服务注册
        register: true
        # 服务停止时取消注册
        deregister: true
        # 表示注册时使用IP而不是hostname
        prefer-ip-address: true
        # 执行监控检查的频率
        health-check-interval: 30s
        # 设置健康检查失败多长时间后，取消注册
        health-check-critical-timeout: 30s
        # 健康检查的路径
        health-check-path: /actuator/health
        # 服务注册标识，格式为：应用名称+服务器IP+端口
        instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
        # 注册到consul的服务名称
        service-name: ${spring.application.name}

  thrift:
    server:
      service-id: user-service-thrift
      service-model: hsHa
      port: 25000
      worker-queue-capacity: 1000
      hs-ha:
        min-worker-threads: 5
        max-worker-threads: 20
        keep-alived-time: 3
      discovery:
        enabled: true
        host: ${consul.ip}
        port: 8500
        deregister: true
        tags:
          - user-service-thrift
          - hsHa
        health-check:
          enabled: true
          check-interval: 10
          check-timeout: 3

  #防止Date类型返到前端是时间戮
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

  # redis缓存
  redis:
    host: ${redis.ip}
    database: 0
    port: 6379
    password:

  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: never
    properties:
      org:
        quartz:
          scheduler:
            # 如果使用集群，实例名需相同
            instanceName: clusteredScheduler
            # 如果使用集群，id需相同
            instanceId: AUTO
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_
            isClustered: true
            clusterCheckinInterval: 10000
            useProperties: false
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true


#整合mybatis
mybatis:
  # type-aliases-package: com.project.user.entity      # 定义所有操作类的别名所在包，（定义多个别名用豆号隔开）
  # mapper-locations: classpath:mybatis/**/*.xml      # 所有的mapper映射文件
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    cacheEnabled: true                               #开启二级缓存
    mapUnderscoreToCamelCase: true                 #驼峰的自动映射

##actuator监控，暴露所有端点，访问时需加前缀，/actuator/env
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always

#feign数据压缩处理
feign:
  compression:
    request:
      mime-types:       # 可以被压缩的类型
        - text/xml
        - application/xml
        - application/json
      min-request-size: 2048 # 超过2048的字节进行压缩
  hystrix:
    enabled: true    #服务降级需要加上此处

#ribbon超时配置
ribbon:
  ConnectTimeout: 60000     #ribbon请求连接的超时时间
  ReadTimeout: 60000          #请求处理的超时时间
  MaxAutoRetries: 1         #对第一次请求的服务的重试次数
  MaxAutoRetriesNextServer: 1  #要重试的下一个服务的最大数量（不包括第一个服务）
  OkToRetryOnAllOperations: true

#hystrix超时配置
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 60000

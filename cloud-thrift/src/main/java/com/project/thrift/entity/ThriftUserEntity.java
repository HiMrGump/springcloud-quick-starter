/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.project.thrift.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-12")
public class ThriftUserEntity implements org.apache.thrift.TBase<ThriftUserEntity, ThriftUserEntity._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftUserEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftUserEntity");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accountName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ID_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("idCard", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DELETE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteFlag", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftUserEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftUserEntityTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String id; // required
  public @org.apache.thrift.annotation.Nullable String accountName; // required
  public @org.apache.thrift.annotation.Nullable String password; // required
  public @org.apache.thrift.annotation.Nullable String nickName; // required
  public @org.apache.thrift.annotation.Nullable String idCard; // required
  public int deleteFlag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ACCOUNT_NAME((short)2, "accountName"),
    PASSWORD((short)3, "password"),
    NICK_NAME((short)4, "nickName"),
    ID_CARD((short)5, "idCard"),
    DELETE_FLAG((short)6, "deleteFlag");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ACCOUNT_NAME
          return ACCOUNT_NAME;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // NICK_NAME
          return NICK_NAME;
        case 5: // ID_CARD
          return ID_CARD;
        case 6: // DELETE_FLAG
          return DELETE_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DELETEFLAG_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("accountName", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_CARD, new org.apache.thrift.meta_data.FieldMetaData("idCard", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELETE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("deleteFlag", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftUserEntity.class, metaDataMap);
  }

  public ThriftUserEntity() {
  }

  public ThriftUserEntity(
    String id,
    String accountName,
    String password,
    String nickName,
    String idCard,
    int deleteFlag)
  {
    this();
    this.id = id;
    this.accountName = accountName;
    this.password = password;
    this.nickName = nickName;
    this.idCard = idCard;
    this.deleteFlag = deleteFlag;
    setDeleteFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftUserEntity(ThriftUserEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetAccountName()) {
      this.accountName = other.accountName;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    if (other.isSetIdCard()) {
      this.idCard = other.idCard;
    }
    this.deleteFlag = other.deleteFlag;
  }

  public ThriftUserEntity deepCopy() {
    return new ThriftUserEntity(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.accountName = null;
    this.password = null;
    this.nickName = null;
    this.idCard = null;
    setDeleteFlagIsSet(false);
    this.deleteFlag = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public String getId() {
    return this.id;
  }

  public ThriftUserEntity setId(@org.apache.thrift.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getAccountName() {
    return this.accountName;
  }

  public ThriftUserEntity setAccountName(@org.apache.thrift.annotation.Nullable String accountName) {
    this.accountName = accountName;
    return this;
  }

  public void unsetAccountName() {
    this.accountName = null;
  }

  /** Returns true if field accountName is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountName() {
    return this.accountName != null;
  }

  public void setAccountNameIsSet(boolean value) {
    if (!value) {
      this.accountName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getPassword() {
    return this.password;
  }

  public ThriftUserEntity setPassword(@org.apache.thrift.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getNickName() {
    return this.nickName;
  }

  public ThriftUserEntity setNickName(@org.apache.thrift.annotation.Nullable String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getIdCard() {
    return this.idCard;
  }

  public ThriftUserEntity setIdCard(@org.apache.thrift.annotation.Nullable String idCard) {
    this.idCard = idCard;
    return this;
  }

  public void unsetIdCard() {
    this.idCard = null;
  }

  /** Returns true if field idCard is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCard() {
    return this.idCard != null;
  }

  public void setIdCardIsSet(boolean value) {
    if (!value) {
      this.idCard = null;
    }
  }

  public int getDeleteFlag() {
    return this.deleteFlag;
  }

  public ThriftUserEntity setDeleteFlag(int deleteFlag) {
    this.deleteFlag = deleteFlag;
    setDeleteFlagIsSet(true);
    return this;
  }

  public void unsetDeleteFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELETEFLAG_ISSET_ID);
  }

  /** Returns true if field deleteFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELETEFLAG_ISSET_ID);
  }

  public void setDeleteFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELETEFLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case ACCOUNT_NAME:
      if (value == null) {
        unsetAccountName();
      } else {
        setAccountName((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case ID_CARD:
      if (value == null) {
        unsetIdCard();
      } else {
        setIdCard((String)value);
      }
      break;

    case DELETE_FLAG:
      if (value == null) {
        unsetDeleteFlag();
      } else {
        setDeleteFlag((Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ACCOUNT_NAME:
      return getAccountName();

    case PASSWORD:
      return getPassword();

    case NICK_NAME:
      return getNickName();

    case ID_CARD:
      return getIdCard();

    case DELETE_FLAG:
      return getDeleteFlag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ACCOUNT_NAME:
      return isSetAccountName();
    case PASSWORD:
      return isSetPassword();
    case NICK_NAME:
      return isSetNickName();
    case ID_CARD:
      return isSetIdCard();
    case DELETE_FLAG:
      return isSetDeleteFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftUserEntity)
      return this.equals((ThriftUserEntity)that);
    return false;
  }

  public boolean equals(ThriftUserEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_accountName = true && this.isSetAccountName();
    boolean that_present_accountName = true && that.isSetAccountName();
    if (this_present_accountName || that_present_accountName) {
      if (!(this_present_accountName && that_present_accountName))
        return false;
      if (!this.accountName.equals(that.accountName))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_idCard = true && this.isSetIdCard();
    boolean that_present_idCard = true && that.isSetIdCard();
    if (this_present_idCard || that_present_idCard) {
      if (!(this_present_idCard && that_present_idCard))
        return false;
      if (!this.idCard.equals(that.idCard))
        return false;
    }

    boolean this_present_deleteFlag = true;
    boolean that_present_deleteFlag = true;
    if (this_present_deleteFlag || that_present_deleteFlag) {
      if (!(this_present_deleteFlag && that_present_deleteFlag))
        return false;
      if (this.deleteFlag != that.deleteFlag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccountName()) ? 131071 : 524287);
    if (isSetAccountName())
      hashCode = hashCode * 8191 + accountName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetNickName()) ? 131071 : 524287);
    if (isSetNickName())
      hashCode = hashCode * 8191 + nickName.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdCard()) ? 131071 : 524287);
    if (isSetIdCard())
      hashCode = hashCode * 8191 + idCard.hashCode();

    hashCode = hashCode * 8191 + deleteFlag;

    return hashCode;
  }

  @Override
  public int compareTo(ThriftUserEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountName()).compareTo(other.isSetAccountName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountName, other.accountName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(other.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdCard()).compareTo(other.isSetIdCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCard, other.idCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleteFlag()).compareTo(other.isSetDeleteFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteFlag, other.deleteFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftUserEntity(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountName:");
    if (this.accountName == null) {
      sb.append("null");
    } else {
      sb.append(this.accountName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idCard:");
    if (this.idCard == null) {
      sb.append("null");
    } else {
      sb.append(this.idCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleteFlag:");
    sb.append(this.deleteFlag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (accountName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountName' was not present! Struct: " + toString());
    }
    if (password == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'password' was not present! Struct: " + toString());
    }
    if (nickName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nickName' was not present! Struct: " + toString());
    }
    if (idCard == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'idCard' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'deleteFlag' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftUserEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftUserEntityStandardScheme getScheme() {
      return new ThriftUserEntityStandardScheme();
    }
  }

  private static class ThriftUserEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftUserEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftUserEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCOUNT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountName = iprot.readString();
              struct.setAccountNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ID_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idCard = iprot.readString();
              struct.setIdCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DELETE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deleteFlag = iprot.readI32();
              struct.setDeleteFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDeleteFlag()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'deleteFlag' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftUserEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.accountName != null) {
        oprot.writeFieldBegin(ACCOUNT_NAME_FIELD_DESC);
        oprot.writeString(struct.accountName);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      if (struct.idCard != null) {
        oprot.writeFieldBegin(ID_CARD_FIELD_DESC);
        oprot.writeString(struct.idCard);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELETE_FLAG_FIELD_DESC);
      oprot.writeI32(struct.deleteFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftUserEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftUserEntityTupleScheme getScheme() {
      return new ThriftUserEntityTupleScheme();
    }
  }

  private static class ThriftUserEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftUserEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftUserEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.accountName);
      oprot.writeString(struct.password);
      oprot.writeString(struct.nickName);
      oprot.writeString(struct.idCard);
      oprot.writeI32(struct.deleteFlag);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftUserEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.accountName = iprot.readString();
      struct.setAccountNameIsSet(true);
      struct.password = iprot.readString();
      struct.setPasswordIsSet(true);
      struct.nickName = iprot.readString();
      struct.setNickNameIsSet(true);
      struct.idCard = iprot.readString();
      struct.setIdCardIsSet(true);
      struct.deleteFlag = iprot.readI32();
      struct.setDeleteFlagIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.project.thrift.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-12")
public class ThriftRoleEntity implements org.apache.thrift.TBase<ThriftRoleEntity, ThriftRoleEntity._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftRoleEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftRoleEntity");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("enName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cnName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftRoleEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftRoleEntityTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String id; // required
  public @org.apache.thrift.annotation.Nullable String enName; // required
  public @org.apache.thrift.annotation.Nullable String cnName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    EN_NAME((short)2, "enName"),
    CN_NAME((short)3, "cnName");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // EN_NAME
          return EN_NAME;
        case 3: // CN_NAME
          return CN_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EN_NAME, new org.apache.thrift.meta_data.FieldMetaData("enName", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_NAME, new org.apache.thrift.meta_data.FieldMetaData("cnName", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftRoleEntity.class, metaDataMap);
  }

  public ThriftRoleEntity() {
  }

  public ThriftRoleEntity(
    String id,
    String enName,
    String cnName)
  {
    this();
    this.id = id;
    this.enName = enName;
    this.cnName = cnName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftRoleEntity(ThriftRoleEntity other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetEnName()) {
      this.enName = other.enName;
    }
    if (other.isSetCnName()) {
      this.cnName = other.cnName;
    }
  }

  public ThriftRoleEntity deepCopy() {
    return new ThriftRoleEntity(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.enName = null;
    this.cnName = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getId() {
    return this.id;
  }

  public ThriftRoleEntity setId(@org.apache.thrift.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getEnName() {
    return this.enName;
  }

  public ThriftRoleEntity setEnName(@org.apache.thrift.annotation.Nullable String enName) {
    this.enName = enName;
    return this;
  }

  public void unsetEnName() {
    this.enName = null;
  }

  /** Returns true if field enName is set (has been assigned a value) and false otherwise */
  public boolean isSetEnName() {
    return this.enName != null;
  }

  public void setEnNameIsSet(boolean value) {
    if (!value) {
      this.enName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getCnName() {
    return this.cnName;
  }

  public ThriftRoleEntity setCnName(@org.apache.thrift.annotation.Nullable String cnName) {
    this.cnName = cnName;
    return this;
  }

  public void unsetCnName() {
    this.cnName = null;
  }

  /** Returns true if field cnName is set (has been assigned a value) and false otherwise */
  public boolean isSetCnName() {
    return this.cnName != null;
  }

  public void setCnNameIsSet(boolean value) {
    if (!value) {
      this.cnName = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case EN_NAME:
      if (value == null) {
        unsetEnName();
      } else {
        setEnName((String)value);
      }
      break;

    case CN_NAME:
      if (value == null) {
        unsetCnName();
      } else {
        setCnName((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case EN_NAME:
      return getEnName();

    case CN_NAME:
      return getCnName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case EN_NAME:
      return isSetEnName();
    case CN_NAME:
      return isSetCnName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftRoleEntity)
      return this.equals((ThriftRoleEntity)that);
    return false;
  }

  public boolean equals(ThriftRoleEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_enName = true && this.isSetEnName();
    boolean that_present_enName = true && that.isSetEnName();
    if (this_present_enName || that_present_enName) {
      if (!(this_present_enName && that_present_enName))
        return false;
      if (!this.enName.equals(that.enName))
        return false;
    }

    boolean this_present_cnName = true && this.isSetCnName();
    boolean that_present_cnName = true && that.isSetCnName();
    if (this_present_cnName || that_present_cnName) {
      if (!(this_present_cnName && that_present_cnName))
        return false;
      if (!this.cnName.equals(that.cnName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnName()) ? 131071 : 524287);
    if (isSetEnName())
      hashCode = hashCode * 8191 + enName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCnName()) ? 131071 : 524287);
    if (isSetCnName())
      hashCode = hashCode * 8191 + cnName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftRoleEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnName()).compareTo(other.isSetEnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enName, other.enName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnName()).compareTo(other.isSetCnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnName, other.cnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftRoleEntity(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enName:");
    if (this.enName == null) {
      sb.append("null");
    } else {
      sb.append(this.enName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cnName:");
    if (this.cnName == null) {
      sb.append("null");
    } else {
      sb.append(this.cnName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (enName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'enName' was not present! Struct: " + toString());
    }
    if (cnName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cnName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftRoleEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftRoleEntityStandardScheme getScheme() {
      return new ThriftRoleEntityStandardScheme();
    }
  }

  private static class ThriftRoleEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftRoleEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftRoleEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enName = iprot.readString();
              struct.setEnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnName = iprot.readString();
              struct.setCnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftRoleEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.enName != null) {
        oprot.writeFieldBegin(EN_NAME_FIELD_DESC);
        oprot.writeString(struct.enName);
        oprot.writeFieldEnd();
      }
      if (struct.cnName != null) {
        oprot.writeFieldBegin(CN_NAME_FIELD_DESC);
        oprot.writeString(struct.cnName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftRoleEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftRoleEntityTupleScheme getScheme() {
      return new ThriftRoleEntityTupleScheme();
    }
  }

  private static class ThriftRoleEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftRoleEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftRoleEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.enName);
      oprot.writeString(struct.cnName);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftRoleEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.enName = iprot.readString();
      struct.setEnNameIsSet(true);
      struct.cnName = iprot.readString();
      struct.setCnNameIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


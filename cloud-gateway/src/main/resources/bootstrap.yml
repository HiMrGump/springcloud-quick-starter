consul.ip : 127.0.0.1
datasource.ip : 127.0.0.1
redis.ip : 127.0.0.1

server:
  port: 7000

spring:
  output:
    ansi:
      # 打印彩色日志
      enabled: always
    #定义应用名
  application:
    name: cloud-gateway
  cloud:
    consul:
      host: ${consul.ip}
      port: 8500
      discovery:
        # 启用服务发现
        enabled: true
        # 启用服务注册
        register: true
        # 服务停止时取消注册
        deregister: true
        # 表示注册时使用IP而不是hostname
        prefer-ip-address: true
        # 执行监控检查的频率
        health-check-interval: 30s
        # 设置健康检查失败多长时间后，取消注册
        health-check-critical-timeout: 30s
        # 健康检查的路径
        health-check-path: /actuator/health
        # 服务注册标识，格式为：应用名称+服务器IP+端口
        instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
        # 注册到consul的服务名称
        service-name: ${spring.application.name}
      # 利用consul进行配置中心的设置
      config:
        enabled: true   # 默认是true --
        format: YAML    # 表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES
        data-key: data  # 表示consul上面的KEY值(或者说文件的名字) 默认是data
        # watch选项为配置监视功能，主要监视配置的改变
        watch:
          enabled: true
          delay: 10000
          wait-time: 30
    gateway:
      discovery:
        locator:
          enabled: true
          # 服务名小写
          lower-case-service-id: true
  redis:
    host: ${redis.ip}
    database: 2
    port: 6379
    password: 123456

# 暴露监控端点
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always

filters:
  # 熔断降级配置
  - name: Hystrix
    args:
      name: default
      fallbackUri: 'forward:/defaultfallback'
  # redis限流 ， filter名称必须是RequestRateLimiter
  - name: RequestRateLimiter
    args:
      # 使用SpEL名称引用Bean，与上面新建的RateLimiterConfig类中的bean的name相同
      key-resolver: '#{@remoteAddrKeyResolver}'
      # 每秒最大访问次数
      redis-rate-limiter.replenishRate: 20
      # 令牌桶最大容量
      redis-rate-limiter.burstCapacity: 20

# hystrix 信号量隔离，3秒后自动超时
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 3000
  shareSecurityContext: true